<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.Dao.UserInfoMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.Model.UserInfo">
    <id column="uid" jdbcType="VARCHAR" property="uid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Base_Column_List">
    uid, username, name, password, salt, state
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from user_info
    where uid = #{uid,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from user_info
    where uid = #{uid,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.example.demo.Model.UserInfo">
    insert into user_info (uid, username, name, 
      password, salt, state
      )
    values (#{uid,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.Model.UserInfo">
    insert into user_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        uid,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="salt != null">
        salt,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="uid != null">
        #{uid,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.Model.UserInfo">
    update user_info
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null">
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where uid = #{uid,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.Model.UserInfo">
    update user_info
    set username = #{username,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where uid = #{uid,jdbcType=VARCHAR}
  </update>

  <!--自己添加的，多对多-->
  <resultMap id="UserAndRole" type="com.example.demo.Model.UserInfo">
    <id column="uid" jdbcType="VARCHAR" property="uid" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="salt" jdbcType="VARCHAR" property="salt" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <collection property="roles" ofType="com.example.demo.Model.SysUserRoleKey">
      <id column="role_id" jdbcType="VARCHAR" property="roleId" />
      <id column="uid" jdbcType="VARCHAR" property="uid" />
      <association property="role" javaType="com.example.demo.Model.SysRole">
        <id column="role_id" jdbcType="VARCHAR" property="roleId" />
        <result column="available" jdbcType="INTEGER" property="available" />
        <result column="description" jdbcType="VARCHAR" property="description" />
        <result column="role" jdbcType="VARCHAR" property="role" />
      </association>
    </collection>
  </resultMap>
  <select id="selectByUsername" resultType="com.example.demo.Model.UserInfo" parameterType="java.lang.String">
    select * from user_info where username=#{username}
  </select>
  <select id="selectUserRole" resultType="com.example.demo.Model.SysRole" parameterType="java.lang.String">
    select sr.role_id ,sr.available,sr.description,sr.role
    FROM user_info  u
    left join  sys_user_role  sur ON u.uid=sur.uid
    left join sys_role  sr ON sur.role_id=sr.role_id
  </select>
</mapper>